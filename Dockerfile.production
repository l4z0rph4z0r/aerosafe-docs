# Multi-stage Production Dockerfile for AeroSafe Documentation Site
# Security-hardened production build with minimal attack surface

# Stage 1: Build the Docusaurus site with security scanning
FROM node:18-alpine AS security-scanner

# Install security scanning tools
RUN apk add --no-cache \
    git \
    python3 \
    py3-pip && \
    pip3 install safety

# Set working directory
WORKDIR /app

# Copy package files first for dependency caching
COPY package*.json ./

# Audit dependencies for vulnerabilities
RUN npm audit --audit-level high
RUN npm ci --only=production --silent

# Scan dependencies with Safety
RUN safety check

# Stage 2: Build the application
FROM node:18-alpine AS builder

# Security: Create non-root user for build process
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./

# Install dependencies with exact versions for reproducible builds
# Use npm ci for faster, reliable builds
RUN npm ci --only=production --silent && \
    npm cache clean --force

# Copy source code
COPY . .

# Set ownership to non-root user
RUN chown -R nextjs:nodejs /app
USER nextjs

# Build arguments for environment-specific builds
ARG NODE_ENV=production
ARG DOCUSAURUS_URL=https://docs.aerosafe.it
ARG DOCUSAURUS_BASE_URL=/
ARG BUILD_TIME
ARG GIT_COMMIT_SHA

# Set environment variables
ENV NODE_ENV=$NODE_ENV
ENV DOCUSAURUS_URL=$DOCUSAURUS_URL
ENV DOCUSAURUS_BASE_URL=$DOCUSAURUS_BASE_URL
ENV BUILD_TIME=$BUILD_TIME
ENV GIT_COMMIT_SHA=$GIT_COMMIT_SHA

# Build the site with production optimizations
RUN npm run build:prod

# Verify build output
RUN ls -la build/ && \
    test -f build/index.html || (echo "Build failed - index.html not found" && exit 1)

# Stage 3: Security-hardened production server
FROM nginx:1.26-alpine AS production

# Security: Update packages and install security tools
RUN apk update && apk upgrade && \
    apk add --no-cache \
    ca-certificates \
    curl \
    wget \
    tzdata && \
    rm -rf /var/cache/apk/*

# Security: Create dedicated nginx user with restricted permissions
RUN addgroup -g 101 -S nginx && \
    adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx

# Security: Remove unnecessary nginx modules and files
RUN rm -rf /usr/share/nginx/html/* && \
    rm -f /etc/nginx/conf.d/default.conf

# Copy built site from builder stage with proper ownership
COPY --from=builder --chown=nginx:nginx /app/build /usr/share/nginx/html

# Copy production nginx configuration
COPY --chown=nginx:nginx nginx.conf /etc/nginx/conf.d/default.conf

# Security: Create necessary directories with restricted permissions
RUN mkdir -p /var/cache/nginx/client_temp \
             /var/cache/nginx/proxy_temp \
             /var/cache/nginx/fastcgi_temp \
             /var/cache/nginx/uwsgi_temp \
             /var/cache/nginx/scgi_temp \
             /var/log/nginx \
             /var/run/nginx && \
    chown -R nginx:nginx /var/cache/nginx \
                        /var/log/nginx \
                        /var/run/nginx \
                        /usr/share/nginx/html && \
    chmod -R 755 /usr/share/nginx/html && \
    chmod -R 700 /var/cache/nginx /var/log/nginx /var/run/nginx

# Security: Set strict file permissions
RUN find /usr/share/nginx/html -type f -exec chmod 644 {} \; && \
    find /usr/share/nginx/html -type d -exec chmod 755 {} \;

# Security: Remove setuid/setgid permissions
RUN find / -perm +6000 -type f -exec chmod a-s {} \; 2>/dev/null || true

# Security: Create security.txt for vulnerability disclosure
RUN mkdir -p /usr/share/nginx/html/.well-known && \
    echo "Contact: mailto:security@aerosafe.it" > /usr/share/nginx/html/.well-known/security.txt && \
    echo "Canonical: https://docs.aerosafe.it/.well-known/security.txt" >> /usr/share/nginx/html/.well-known/security.txt && \
    echo "Encryption: https://docs.aerosafe.it/.well-known/pgp-key.txt" >> /usr/share/nginx/html/.well-known/security.txt && \
    echo "Policy: https://docs.aerosafe.it/security-policy" >> /usr/share/nginx/html/.well-known/security.txt && \
    chown nginx:nginx /usr/share/nginx/html/.well-known/security.txt

# Create robots.txt for production
RUN echo "User-agent: *" > /usr/share/nginx/html/robots.txt && \
    echo "Allow: /" >> /usr/share/nginx/html/robots.txt && \
    echo "Sitemap: https://docs.aerosafe.it/sitemap.xml" >> /usr/share/nginx/html/robots.txt && \
    chown nginx:nginx /usr/share/nginx/html/robots.txt

# Health check with enhanced security
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f --connect-timeout 5 --max-time 10 http://localhost:80/health || exit 1

# Security: Switch to non-root user before running
USER nginx

# Expose only necessary port
EXPOSE 80

# Security: Use read-only filesystem for enhanced security
# Mount /var/cache/nginx, /var/log/nginx, /var/run/nginx as tmpfs volumes

# Use exec form for better signal handling
CMD ["nginx", "-g", "daemon off;"]

# Security and build metadata labels
LABEL maintainer="AeroSafe Security Team <security@aerosafe.it>" \
      version="2.0.0" \
      description="AeroSafe Documentation Site - Production Hardened" \
      org.opencontainers.image.title="AeroSafe Documentation (Production)" \
      org.opencontainers.image.description="Security-hardened production build of AeroSafe DryFogS documentation" \
      org.opencontainers.image.vendor="IST S.r.l.s." \
      org.opencontainers.image.source="https://github.com/aerosafe-ist/aerosafe-docs" \
      org.opencontainers.image.documentation="https://docs.aerosafe.it" \
      org.opencontainers.image.created="${BUILD_TIME}" \
      org.opencontainers.image.revision="${GIT_COMMIT_SHA}" \
      security.scan.date="${BUILD_TIME}" \
      security.scan.tools="npm-audit,safety" \
      security.contact="security@aerosafe.it"