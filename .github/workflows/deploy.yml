name: Deploy AeroSafe Documentation

on:
  push:
    branches:
      - main        # Deploy to production
      - staging     # Deploy to staging
      - develop     # Deploy to development
  pull_request:
    branches: [main, staging]
    types: [opened, synchronize, reopened, closed]
  
  # Manual trigger
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - production
          - staging
          - development

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: aerosafe-docs

jobs:
  # Lint and test job
  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Type check
        run: npm run typecheck
      
      - name: Format check
        run: npm run format:check
      
      - name: Security audit
        run: npm run audit:security
        continue-on-error: true
      
      - name: Test build
        run: npm run test:build

  # Build job for different environments
  build:
    name: Build (${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: quality-check
    if: always() && (needs.quality-check.result == 'success' || needs.quality-check.result == 'skipped')
    
    strategy:
      matrix:
        environment: [production, staging]
        include:
          - environment: production
            url: https://docs.aerosafe.it
            branch: main
          - environment: staging  
            url: https://staging-docs.aerosafe.it
            branch: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Build site
        run: npm run build:${{ matrix.environment }}
        env:
          NODE_ENV: production
          DOCUSAURUS_URL: ${{ matrix.url }}
          DOCUSAURUS_BASE_URL: /
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: build/
          retention-days: 30

  # Docker build job
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        environment: [production, staging]
        include:
          - environment: production
            url: https://docs.aerosafe.it
            tag: latest,prod
            branch: main
          - environment: staging
            url: https://staging-docs.aerosafe.it
            tag: staging
            branch: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/aerosafe-ist/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ matrix.tag }}
          labels: |
            org.opencontainers.image.title=AeroSafe Documentation
            org.opencontainers.image.description=Official documentation for AeroSafe DryFogS nebulizers
            org.opencontainers.image.vendor=IST S.r.l.s.
            org.opencontainers.image.url=https://docs.aerosafe.it
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production
            DOCUSAURUS_URL=${{ matrix.url }}
            DOCUSAURUS_BASE_URL=/
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Vercel deployment job
  deploy-vercel:
    name: Deploy to Vercel
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    strategy:
      matrix:
        environment: [production, staging]
        include:
          - environment: production
            vercel_env: production
            branch: main
          - environment: staging
            vercel_env: preview
            branch: staging
    
    environment:
      name: ${{ matrix.environment }}
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Vercel CLI
        run: npm install -g vercel@latest
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.environment }}
          path: build/
      
      - name: Deploy to Vercel
        id: deploy
        run: |
          if [ "${{ matrix.environment }}" = "production" ]; then
            vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}
          else
            vercel deploy --token=${{ secrets.VERCEL_TOKEN }}
          fi
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

  # Self-hosted deployment job (if using own servers)
  deploy-selfhosted:
    name: Deploy to Self-Hosted
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    strategy:
      matrix:
        environment: [production, staging]
        include:
          - environment: production
            host: ${{ secrets.PROD_HOST }}
            port: ${{ secrets.PROD_PORT }}
            compose_profile: production
          - environment: staging
            host: ${{ secrets.STAGING_HOST }}
            port: ${{ secrets.STAGING_PORT }}
            compose_profile: staging
    
    environment:
      name: ${{ matrix.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no -p ${{ matrix.port }} deploy@${{ matrix.host }} << 'ENDSSH'
            cd /opt/aerosafe-docs
            git pull origin ${{ github.ref_name }}
            docker-compose --profile ${{ matrix.compose_profile }} pull
            docker-compose --profile ${{ matrix.compose_profile }} up -d
            docker system prune -f
          ENDSSH

  # Health check job
  health-check:
    name: Health Check (${{ matrix.environment }})
    runs-on: ubuntu-latest
    needs: [deploy-vercel, deploy-selfhosted]
    if: always() && (needs.deploy-vercel.result == 'success' || needs.deploy-selfhosted.result == 'success')
    
    strategy:
      matrix:
        environment: [production, staging]
        include:
          - environment: production
            url: https://docs.aerosafe.it
          - environment: staging
            url: https://staging-docs.aerosafe.it
    
    steps:
      - name: Wait for deployment
        run: sleep 30
      
      - name: Check site health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ matrix.url }}/health)
          if [ $response -eq 200 ]; then
            echo "✅ Health check passed for ${{ matrix.environment }}"
          else
            echo "❌ Health check failed for ${{ matrix.environment }} (HTTP $response)"
            exit 1
          fi
      
      - name: Check sitemap
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ matrix.url }}/sitemap.xml)
          if [ $response -eq 200 ]; then
            echo "✅ Sitemap check passed for ${{ matrix.environment }}"
          else
            echo "❌ Sitemap check failed for ${{ matrix.environment }} (HTTP $response)"
            exit 1
          fi

  # Lighthouse audit job
  lighthouse:
    name: Lighthouse Audit
    runs-on: ubuntu-latest
    needs: health-check
    if: github.ref == 'refs/heads/main' && needs.health-check.result == 'success'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://docs.aerosafe.it
            https://docs.aerosafe.it/products/dryfogs
            https://docs.aerosafe.it/industries/healthcare
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Security scan job
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/aerosafe-ist/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Notification job
  notification:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [health-check, lighthouse]
    if: always()
    
    steps:
      - name: Send Slack notification
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: |
            AeroSafe Documentation deployment ${{ job.status }}
            Environment: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
      
      - name: Send email notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: 'AeroSafe Docs Deployment Failed'
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: ${{ secrets.FROM_EMAIL }}
          body: |
            The AeroSafe Documentation deployment has failed.
            
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Workflow: ${{ github.workflow }}
            
            Please check the GitHub Actions logs for more details.
            
            Link: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}